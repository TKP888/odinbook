<div class="container-fluid">
  <div class="row">
    <!-- Main Content -->
    <div class="col-lg-9">
      <div class="row">
        <!-- Welcome Section -->
        <div class="col-12 mb-4">
          <div class="card">
            <div class="card-body text-center">
              <div class="welcome-avatar mb-3">
                <div class="user-avatar-large">
                  <%= user.firstName.charAt(0) %><%= user.lastName.charAt(0) %>
                </div>
              </div>
              <h2>Welcome back, <%= user.firstName %>!</h2>
              <!-- <p class="text-muted">What's on your mind today?</p> -->
            </div>
          </div>
        </div>

        <!-- Quick Stats -->
        <div class="col-md-6 mb-4">
          <div class="card">
            <div class="card-body text-center">
              <!-- <i class="fas fa-newspaper fa-2x text-primary mb-3"></i> -->
              <h5>Posts</h5>
              <p class="text-muted" id="postsCount">0 posts</p>
              <button
                class="btn btn-primary btn-sm"
                onclick="openCreatePostModal()"
              >
                + Create Post
              </button>
            </div>
          </div>
        </div>

        <div class="col-md-6 mb-4">
          <div class="card">
            <div class="card-body text-center">
              <!-- <i class="fas fa-heart fa-2x text-danger mb-3"></i> -->
              <h5>Likes</h5>
              <p class="text-muted">0 likes</p>
              <button class="btn btn-danger btn-sm">View Liked Posts</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Posts Feed -->
      <div class="row">
        <div class="col-12">
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0">Recent Posts</h5>
            </div>
            <div class="card-body">
              <!-- Loading State -->
              <div id="postsLoading" class="text-center">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading posts...</p>
              </div>

              <!-- Posts List -->
              <div id="postsList" style="display: none"></div>

              <!-- No Posts -->
              <div
                id="noPosts"
                style="display: none"
                class="text-center text-muted"
              >
                <p>No posts yet.</p>
                <!-- <p class="small">Be the first to share something!</p> -->
                <button class="btn btn-primary" onclick="openCreatePostModal()">
                  + Create Post
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="col-lg-3">
      <!-- Friends Sidebar -->
      <div class="card">
        <div class="card-header bg-transparent border-0">
          <h6 class="mb-0">
            Your Friends
            <span id="friendsCount" class="badge bg-primary ms-2">0</span>
          </h6>
        </div>
        <div class="card-body">
          <!-- Loading State -->
          <div id="friendsLoading" class="text-center">
            <div
              class="spinner-border spinner-border-sm text-primary"
              role="status"
            >
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 small text-muted">Loading friends...</p>
          </div>

          <!-- Friends List -->
          <div id="friendsList" style="display: none"></div>

          <!-- No Friends -->
          <div
            id="noFriends"
            style="display: none"
            class="text-center text-muted"
          >
            <p class="mb-2">No friends yet</p>
            <!-- <p class="small">
              Start connecting with people to build your network!
            </p> -->
            <button class="btn btn-primary btn-sm" onclick="showUserSearch()">
              Find Friends
            </button>
          </div>

          <!-- Messages -->
          <!-- <div class="mt-4">
            <h6 class="mb-3">
              Messages
              <span id="messagesCount" class="badge bg-info ms-2">0</span>
            </h6>
            <div class="text-center text-muted">
              <p class="mb-2">No messages yet</p>

              <button class="btn btn-info btn-sm">View Messages</button>
            </div>
          </div> -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create Post Modal -->
<div
  class="modal fade"
  id="createPostModal"
  tabindex="-1"
  aria-labelledby="createPostModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createPostModalLabel">Create New Post</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="createPostForm">
          <div class="mb-3">
            <!-- <label for="postContent" class="form-label"
              >What's on your mind?</label
            > -->
            <textarea
              id="postContent"
              class="form-control"
              rows="6"
              placeholder="What's on your mind, <%= user.firstName.charAt(0) %>?"
              maxlength="250"
            ></textarea>
            <div class="form-text"><span id="charCount">0</span>/250</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button
          type="button"
          class="btn btn-primary"
          onclick="createPost()"
          id="createPostBtn"
        >
          Post
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Post Modal -->
<div
  class="modal fade"
  id="editPostModal"
  tabindex="-1"
  aria-labelledby="editPostModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editPostModalLabel">Edit Post</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="editPostForm">
          <input type="hidden" id="editPostId" />
          <div class="mb-3">
            <textarea
              id="editPostContent"
              class="form-control"
              rows="6"
              placeholder="What's on your mind?"
              maxlength="1000"
            ></textarea>
            <div class="form-text"><span id="editCharCount">0</span>/250</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button
          type="button"
          class="btn btn-primary"
          onclick="saveEditedPost()"
          id="saveEditPostBtn"
        >
          Save
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize modals
  let createPostModal;
  let editPostModal;

  // Load friends list when page loads
  document.addEventListener("DOMContentLoaded", function () {
    loadFriendsList();
    loadPosts();
    initializeModals();
  });

  function initializeModals() {
    // Initialize modals
    createPostModal = new bootstrap.Modal(
      document.getElementById("createPostModal")
    );
    editPostModal = new bootstrap.Modal(
      document.getElementById("editPostModal")
    );

    // Character count for create post textarea
    const postContent = document.getElementById("postContent");
    if (postContent) {
      postContent.addEventListener("input", function () {
        const text = this.value;
        const charCount = text.length;
        document.getElementById("charCount").textContent = charCount;

        // Update character count color
        const charCountElement = document.getElementById("charCount");
        if (charCount > 900) {
          charCountElement.style.color = "#dc3545";
        } else if (charCount > 800) {
          charCountElement.style.color = "#ffc107";
        } else {
          charCountElement.style.color = "#6c757d";
        }
      });
    }

    // Character count for edit post textarea
    const editPostContent = document.getElementById("editPostContent");
    if (editPostContent) {
      editPostContent.addEventListener("input", function () {
        const text = this.value;
        const charCount = text.length;
        document.getElementById("editCharCount").textContent = charCount;

        // Update character count color
        const charCountElement = document.getElementById("editCharCount");
        if (charCount > 900) {
          charCountElement.style.color = "#dc3545";
        } else if (charCount > 800) {
          charCountElement.style.color = "#ffc107";
        } else {
          charCountElement.style.color = "#6c757d";
        }
      });
    }
  }

  function openCreatePostModal() {
    document.getElementById("postContent").value = "";
    document.getElementById("charCount").textContent = "0";
    document.getElementById("charCount").style.color = "#6c757d";
    createPostModal.show();
  }

  function createPost() {
    const content = document.getElementById("postContent").value.trim();

    if (!content) {
      alert("Please enter some content for your post.");
      return;
    }

    if (content.length > 250) {
      alert("Post content cannot exceed 250 characters.");
      return;
    }

    const createPostBtn = document.getElementById("createPostBtn");
    const originalText = createPostBtn.innerHTML;
    createPostBtn.innerHTML =
      '<i class="fas fa-spinner fa-spin"></i> Posting...';
    createPostBtn.disabled = true;

    fetch("/posts", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ content }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          createPostModal.hide();
          loadPosts(); // Refresh posts list

          // Show success notification
          const alertDiv = document.createElement("div");
          alertDiv.className =
            "alert alert-success alert-dismissible fade show position-fixed";
          alertDiv.style.cssText =
            "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
          alertDiv.innerHTML = `
          <i class="fas fa-check"></i> Post created successfully!
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
          document.body.appendChild(alertDiv);
          setTimeout(() => alertDiv.remove(), 3000);
        } else {
          alert(data.error || "Failed to create post");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        alert("Failed to create post. Please try again.");
      })
      .finally(() => {
        createPostBtn.innerHTML = originalText;
        createPostBtn.disabled = false;
      });
  }

  function loadPosts() {
    const postsLoading = document.getElementById("postsLoading");
    const postsList = document.getElementById("postsList");
    const noPosts = document.getElementById("noPosts");

    postsLoading.style.display = "block";
    postsList.style.display = "none";
    noPosts.style.display = "none";

    fetch("/posts")
      .then((response) => response.json())
      .then((data) => {
        postsLoading.style.display = "none";
        displayPosts(data.posts);
        updatePostsCount(data.posts.length);
      })
      .catch((error) => {
        console.error("Error loading posts:", error);
        postsLoading.style.display = "none";
        noPosts.style.display = "block";
      });
  }

  function displayPosts(posts) {
    const postsList = document.getElementById("postsList");
    const noPosts = document.getElementById("noPosts");

    if (posts.length === 0) {
      postsList.style.display = "none";
      noPosts.style.display = "block";
      return;
    }

    noPosts.style.display = "none";
    postsList.style.display = "block";

    postsList.innerHTML = posts
      .map(
        (post) => `
        <div class="post-item mb-4 p-3 border rounded">
          <div class="d-flex align-items-start mb-3">
            <div class="user-avatar-small me-3" style="width: 40px; height: 40px; font-size: 1rem;">
              ${(post.user.firstName || "").charAt(0)}${(
          post.user.lastName || ""
        ).charAt(0)}
            </div>
            <div class="flex-grow-1">
              <div class="d-flex justify-content-between align-items-start">
                <div>
                  <h6 class="mb-1">
                    ${post.user.firstName || ""} ${post.user.lastName || ""}
                    <span class="text-muted small">@${post.user.username}</span>
                  </h6>
                  <small class="text-muted">
                 
                    
                    ${formatDateTime(post.createdAt)}
                  </small>
                </div>
                ${
                  post.user.id === "<%= user.id %>"
                    ? `
                  <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                      <i class="fas fa-ellipsis-h"></i>
                    </button>
                    <ul class="dropdown-menu">
                      <li><a class="dropdown-item" href="#" onclick="editPost('${post.id}')">
                      Edit
                      </a></li>
                      <li><a class="dropdown-item text-danger" href="#" onclick="deletePost('${post.id}')">
                        Delete
                      </a></li>
                    </ul>
                  </div>
                `
                    : ""
                }
              </div>
            </div>
          </div>
          <div class="post-content">
            ${post.content.replace(/\n/g, "<br>")}
          </div>
          
          <!-- Post Actions -->
          <div class="post-actions mt-3 pt-3 border-top">
            <div class="d-flex justify-content-between align-items-center">
              <!-- Action Buttons -->
              <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-primary" onclick="likePost('${
                  post.id
                }')">
                Like
                </button>
                <button class="btn btn-sm btn-outline-secondary" onclick="commentPost('${
                  post.id
                }')">
            Comment
                </button>
               
              </div>
              <!-- Counters -->
              <div class="text-muted small">
                <span class="likes-count" id="likes-${post.id}">0 likes</span>
                <span class="comments-count ms-2" id="comments-${
                  post.id
                }">0 comments</span>
              </div>
            </div>
          </div>
        </div>
      `
      )
      .join("");
  }

  function updatePostsCount(count) {
    const postsCountElement = document.getElementById("postsCount");
    if (postsCountElement) {
      postsCountElement.textContent = `${count} post${count !== 1 ? "s" : ""}`;
    }
  }

  function formatDateTime(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now - date) / (1000 * 60 * 60);

    if (diffInHours < 1) {
      const diffInMinutes = Math.floor((now - date) / (1000 * 60));
      return `${diffInMinutes} minute${diffInMinutes !== 1 ? "s" : ""} ago`;
    } else if (diffInHours < 24) {
      const hours = Math.floor(diffInHours);
      return `${hours} hour${hours !== 1 ? "s" : ""} ago`;
    } else if (diffInHours < 168) {
      // 7 days
      const days = Math.floor(diffInHours / 24);
      return `${days} day${days !== 1 ? "s" : ""} ago`;
    } else {
      return (
        date.toLocaleDateString() +
        " at " +
        date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
      );
    }
  }

  function deletePost(postId) {
    if (confirm("Are you sure you want to delete this post?")) {
      fetch(`/posts/${postId}`, {
        method: "DELETE",
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            loadPosts(); // Refresh posts list

            // Show success notification
            const alertDiv = document.createElement("div");
            alertDiv.className =
              "alert alert-info alert-dismissible fade show position-fixed";
            alertDiv.style.cssText =
              "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
            alertDiv.innerHTML = `
           Post deleted
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
          } else {
            alert(data.error || "Failed to delete post");
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          alert("Failed to delete post. Please try again.");
        });
    }
  }

  function editPost(postId) {
    // Fetch the post data and open edit modal
    fetch(`/posts/${postId}`)
      .then((response) => response.json())
      .then((data) => {
        if (data.post) {
          // Check if the post belongs to the current user
          if (data.post.user.id === "<%= user.id %>") {
            // Populate the edit modal
            document.getElementById("editPostId").value = postId;
            document.getElementById("editPostContent").value =
              data.post.content;
            document.getElementById("editCharCount").textContent =
              data.post.content.length;

            // Reset character count color
            const charCountElement = document.getElementById("editCharCount");
            if (data.post.content.length > 900) {
              charCountElement.style.color = "#dc3545";
            } else if (data.post.content.length > 800) {
              charCountElement.style.color = "#ffc107";
            } else {
              charCountElement.style.color = "#6c757d";
            }

            // Show the edit modal
            editPostModal.show();
          } else {
            alert("You can only edit your own posts.");
          }
        } else {
          alert("Post not found.");
        }
      })
      .catch((error) => {
        console.error("Error fetching post:", error);
        alert("Failed to load post for editing.");
      });
  }

  function saveEditedPost() {
    const postId = document.getElementById("editPostId").value;
    const content = document.getElementById("editPostContent").value.trim();

    if (!content) {
      alert("Please enter some content for your post.");
      return;
    }

    if (content.length > 250) {
      alert("Post content cannot exceed 250 characters.");
      return;
    }

    const saveEditPostBtn = document.getElementById("saveEditPostBtn");
    const originalText = saveEditPostBtn.innerHTML;
    saveEditPostBtn.innerHTML =
      '<i class="fas fa-spinner fa-spin"></i> Saving...';
    saveEditPostBtn.disabled = true;

    fetch(`/posts/${postId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ content }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          editPostModal.hide();
          loadPosts(); // Refresh posts list

          // Show success notification
          const alertDiv = document.createElement("div");
          alertDiv.className =
            "alert alert-success alert-dismissible fade show position-fixed";
          alertDiv.style.cssText =
            "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
          alertDiv.innerHTML = `
          <i class="fas fa-check"></i> Post updated successfully!
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
          document.body.appendChild(alertDiv);
          setTimeout(() => alertDiv.remove(), 3000);
        } else {
          alert(data.error || "Failed to update post");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        alert("Failed to update post. Please try again.");
      })
      .finally(() => {
        saveEditPostBtn.innerHTML = originalText;
        saveEditPostBtn.disabled = false;
      });
  }

  function loadFriendsList() {
    const friendsLoading = document.getElementById("friendsLoading");
    const friendsList = document.getElementById("friendsList");
    const noFriends = document.getElementById("noFriends");

    // Show loading state
    friendsLoading.style.display = "block";
    friendsList.style.display = "none";
    noFriends.style.display = "none";

    fetch("/friends/list")
      .then((response) => response.json())
      .then((data) => {
        friendsLoading.style.display = "none";
        displayFriends(data.friends);
      })
      .catch((error) => {
        console.error("Error loading friends:", error);
        friendsLoading.style.display = "none";
        noFriends.style.display = "block";
      });
  }

  function displayFriends(friends) {
    const friendsList = document.getElementById("friendsList");
    const noFriends = document.getElementById("noFriends");
    const friendsCount = document.getElementById("friendsCount");

    // Update friends count
    if (friendsCount) {
      friendsCount.textContent = friends.length;
    }

    if (friends.length === 0) {
      friendsList.style.display = "none";
      noFriends.style.display = "block";
      return;
    }

    noFriends.style.display = "none";
    friendsList.style.display = "block";

    friendsList.innerHTML = friends
      .map(
        (friend) => `
      <div class="d-flex align-items-center mb-2">
        <div class="user-avatar-small me-2" style="width: 32px; height: 32px; font-size: 0.8rem;">
          ${(friend.firstName || "").charAt(0)}${(friend.lastName || "").charAt(
          0
        )}
        </div>
        <div class="flex-grow-1">
          <div class="fw-bold small">${friend.firstName || ""} ${
          friend.lastName || ""
        }</div>
          <div class="text-muted small">@${friend.username}</div>
        </div>
        <div class="d-flex align-items-center">
          <div class="text-success me-2">
            <i class="fas fa-check-circle"></i>
          </div>
          <button class="btn btn-outline-danger btn-sm" onclick="removeFriend('${
            friend.id
          }', '${friend.firstName || ""} ${
          friend.lastName || ""
        }')" title="Remove friend">
            <i class="fas fa-user-minus"></i>
          </button>
        </div>
      </div>
    `
      )
      .join("");

    // Add a "View All" link if there are many friends
    if (friends.length > 8) {
      friendsList.innerHTML += `
        <div class="text-center mt-2">
          <button class="btn btn-outline-primary btn-sm" onclick="showAllFriends()">
            View All ${friends.length} Friends
          </button>
        </div>
      `;
    }
  }

  function showUserSearch() {
    // Focus on the header search input
    const searchInput = document.getElementById("headerSearchInput");
    if (searchInput) {
      searchInput.focus();
      // Trigger search dropdown
      searchInput.dispatchEvent(new Event("input"));
    }
  }

  function showAllFriends() {
    // This could open a modal or navigate to a friends page
    alert("This would show all friends in a modal or separate page");
  }

  // Function to refresh friends list (can be called after accepting a request)
  function refreshFriendsList() {
    loadFriendsList();
  }

  function removeFriend(friendId, friendName) {
    if (
      confirm(
        `Are you sure you want to remove ${friendName} from your friends?`
      )
    ) {
      fetch("/friends/remove", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ friendId }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.success) {
            // Refresh the friends list
            refreshFriendsList();

            // Show success notification
            const alertDiv = document.createElement("div");
            alertDiv.className =
              "alert alert-info alert-dismissible fade show position-fixed";
            alertDiv.style.cssText =
              "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
            alertDiv.innerHTML = `
              <i class="fas fa-user-minus"></i> ${friendName} removed from friends
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
          } else {
            alert(data.error || "Could not remove friend");
          }
        })
        .catch(() => {
          alert("Could not remove friend. Please try again.");
        });
    }
  }

  // Post Action Functions
  function likePost(postId) {
    // // Toggle like button appearance
    // const likeButton = event.target.closest("button");
    // const icon = likeButton.querySelector("i");

    if (likeButton.classList.contains("btn-outline-primary")) {
      // Like the post
      likeButton.classList.remove("btn-outline-primary");
      likeButton.classList.add("btn-primary");
      icon.classList.remove("fa-heart");
      icon.classList.add("fa-heart");

      // Update likes count
      const likesElement = document.getElementById(`likes-${postId}`);
      const currentLikes = parseInt(likesElement.textContent) || 0;
      likesElement.textContent = `${currentLikes + 1} likes`;

      // Show success notification
      showNotification("Post liked!", "success");
    } else {
      // Unlike the post
      likeButton.classList.remove("btn-primary");
      likeButton.classList.add("btn-outline-primary");

      // Update likes count
      const likesElement = document.getElementById(`likes-${postId}`);
      const currentLikes = parseInt(likesElement.textContent) || 1;
      likesElement.textContent = `${currentLikes - 1} likes`;

      // showNotification("Post unliked!", "info");
    }

    // Here you would typically make an API call to save the like state
    // fetch(`/posts/${postId}/like`, { method: 'POST' })
  }

  function commentPost(postId) {
    // Create a simple comment input
    const postElement = event.target.closest(".post-item");
    const existingCommentBox = postElement.querySelector(".comment-box");

    if (existingCommentBox) {
      existingCommentBox.remove();
      return;
    }

    // const commentBox = document.createElement("div");
    // commentBox.className = "comment-box mt-3 p-3 bg-light rounded";
    // commentBox.innerHTML = `
    //   <div class="d-flex gap-2">
    //     <input type="text" class="form-control form-control-sm" placeholder="Write a comment..." id="comment-input-${postId}">
    //     <button class="btn btn-primary btn-sm" onclick="submitComment('${postId}')">
    //       <i class="fas fa-paper-plane"></i>
    //     </button>
    //     <button class="btn btn-secondary btn-sm" onclick="this.closest('.comment-box').remove()">
    //       <i class="fas fa-times"></i>
    //     </button>
    //   </div>
    // `;

    // postElement.appendChild(commentBox);
    // document.getElementById(`comment-input-${postId}`).focus();
  }

  function submitComment(postId) {
    const commentInput = document.getElementById(`comment-input-${postId}`);
    const comment = commentInput.value.trim();

    if (!comment) {
      alert("Please enter a comment.");
      return;
    }

    // Here you would make an API call to save the comment
    // fetch(`/posts/${postId}/comments`, {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({ content: comment })
    // })

    // For now, just show a notification
    showNotification("Comment added!", "success");
    commentInput.value = "";
    commentInput.closest(".comment-box").remove();

    // Update comment count
    const commentsElement = document.getElementById(`comments-${postId}`);
    const currentComments = parseInt(commentsElement.textContent) || 0;
    commentsElement.textContent = `${currentComments + 1} comments`;
  }

  function sharePost(postId) {
    // Create share options
    const shareOptions = [
      {
        name: "Copy Link",
        icon: "fa-link",
        action: () => copyPostLink(postId),
      },
      {
        name: "Share on Facebook",
        icon: "fa-facebook",
        action: () => shareOnSocial("facebook", postId),
      },
      {
        name: "Share on Twitter",
        icon: "fa-twitter",
        action: () => shareOnSocial("twitter", postId),
      },
    ];

    const shareMenu = document.createElement("div");
    shareMenu.className =
      "share-menu position-absolute bg-white border rounded shadow p-2";
    shareMenu.style.cssText = "z-index: 1000; min-width: 200px;";

    shareMenu.innerHTML = shareOptions
      .map(
        (option) => `
      <button class="btn btn-sm btn-outline-secondary w-100 mb-1" onclick="${option.action.toString()}()">
        <i class="fas ${option.icon}"></i> ${option.name}
      </button>
    `
      )
      .join("");

    // Position the menu near the share button
    const shareButton = event.target.closest("button");
    const rect = shareButton.getBoundingClientRect();
    shareMenu.style.top = `${rect.bottom + 5}px`;
    shareMenu.style.left = `${rect.left}px`;

    document.body.appendChild(shareMenu);

    // Close menu when clicking outside
    setTimeout(() => {
      document.addEventListener("click", function closeMenu(e) {
        if (!shareMenu.contains(e.target) && !shareButton.contains(e.target)) {
          shareMenu.remove();
          document.removeEventListener("click", closeMenu);
        }
      });
    }, 100);
  }

  function copyPostLink(postId) {
    const postUrl = `${window.location.origin}/posts/${postId}`;
    navigator.clipboard.writeText(postUrl).then(() => {
      showNotification("Post link copied to clipboard!", "success");
    });
  }

  function shareOnSocial(platform, postId) {
    const postUrl = `${window.location.origin}/posts/${postId}`;
    const text = "Check out this post on OdinBook!";

    let shareUrl = "";
    switch (platform) {
      case "facebook":
        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
          postUrl
        )}`;
        break;
      case "twitter":
        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(
          text
        )}&url=${encodeURIComponent(postUrl)}`;
        break;
    }

    if (shareUrl) {
      window.open(shareUrl, "_blank", "width=600,height=400");
      showNotification(`Shared on ${platform}!`, "success");
    }
  }

  function showNotification(message, type = "info") {
    const alertDiv = document.createElement("div");
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText =
      "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
    alertDiv.innerHTML = `
      <i class="fas fa-${type === "success" ? "check" : "info"}"></i> ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alertDiv);
    setTimeout(() => alertDiv.remove(), 3000);
  }
</script>
