<div class="container-fluid">
  <div class="row">
    <!-- Friends Header -->
    <div class="col-12 mb-4">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0"><i class="fas fa-users"></i> Friends</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <h6>Find Friends</h6>
              <p class="text-muted">Discover and connect with new people</p>
              <button class="btn btn-primary" onclick="toggleSearch()">
                Browse Users
              </button>
            </div>
            <div class="col-md-6">
              <h6>Friend Requests</h6>
              <p class="text-muted">Manage your incoming friend requests</p>
              <button
                class="btn btn-outline-primary"
                onclick="toggleRequests()"
              >
                View Requests
                <span
                  id="requestCount"
                  class="badge bg-danger ms-1"
                  style="display: none"
                  >0</span
                >
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Friend Requests Section -->
    <div class="col-12 mb-4" id="requestsSection" style="display: none">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0"><i class="fas fa-user-plus"></i> Friend Requests</h5>
        </div>
        <div class="card-body">
          <!-- Loading State -->
          <div id="requestsLoading" style="display: none" class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading requests...</p>
          </div>

          <!-- Requests List -->
          <div id="requestsList" style="display: none"></div>

          <!-- No Requests -->
          <div
            id="noRequests"
            style="display: none"
            class="text-center text-muted"
          >
            <i class="fas fa-inbox fa-3x mb-3"></i>
            <p>No pending friend requests.</p>
            <p class="small">
              When someone sends you a friend request, it will appear here!
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Search Section -->
    <div class="col-12 mb-4" id="searchSection" style="display: none">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0"><i class="fas fa-search"></i> Search Users</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-8 mx-auto">
              <div class="input-group mb-3">
                <input
                  type="text"
                  class="form-control"
                  id="searchInput"
                  placeholder="Search by name, username, or email..."
                  autocomplete="off"
                />
                <button
                  class="btn btn-primary"
                  type="button"
                  onclick="searchUsers()"
                >
                  <i class="fas fa-search"></i>
                </button>
              </div>

              <!-- Search Results -->
              <div id="searchResults" style="display: none">
                <h6 class="mb-3">Search Results</h6>
                <div id="usersList"></div>
              </div>

              <!-- Loading State -->
              <div id="searchLoading" style="display: none" class="text-center">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Searching...</p>
              </div>

              <!-- No Results -->
              <div
                id="noResults"
                style="display: none"
                class="text-center text-muted"
              >
                <i class="fas fa-search fa-2x mb-2"></i>
                <p>No users found matching your search.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Current Friends -->
    <div class="col-md-8 mb-4">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">Your Friends</h5>
        </div>
        <div class="card-body">
          <div class="text-center text-muted py-4">
            <i class="fas fa-users fa-3x mb-3"></i>
            <p>No friends yet.</p>
            <p class="small">
              Start connecting with people to build your network!
            </p>
            <button class="btn btn-primary" onclick="toggleSearch()">
              Find Friends
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      let searchTimeout;

      function toggleSearch() {
        const searchSection = document.getElementById("searchSection");
        const requestsSection = document.getElementById("requestsSection");

        if (searchSection.style.display === "none") {
          searchSection.style.display = "block";
          requestsSection.style.display = "none";
          document.getElementById("searchInput").focus();
        } else {
          searchSection.style.display = "none";
          clearSearchResults();
        }
      }

      function toggleRequests() {
        const requestsSection = document.getElementById("requestsSection");
        const searchSection = document.getElementById("searchSection");

        if (requestsSection.style.display === "none") {
          requestsSection.style.display = "block";
          searchSection.style.display = "none";
          loadFriendRequests();
        } else {
          requestsSection.style.display = "none";
        }
      }

      function loadFriendRequests() {
        showRequestsLoading();

        fetch("/friends/requests")
          .then((response) => response.json())
          .then((data) => {
            hideRequestsLoading();
            displayRequests(data.requests);
          })
          .catch((error) => {
            console.error("Error loading friend requests:", error);
            hideRequestsLoading();
            showRequestsError("Failed to load friend requests");
          });
      }

      function displayRequests(requests) {
        const requestsListDiv = document.getElementById("requestsList");
        const noRequestsDiv = document.getElementById("noRequests");

        if (requests.length === 0) {
          requestsListDiv.style.display = "none";
          noRequestsDiv.style.display = "block";
          return;
        }

        noRequestsDiv.style.display = "none";
        requestsListDiv.style.display = "block";

        requestsListDiv.innerHTML = requests
          .map(
            (request) => `
    <div class="card mb-3">
      <div class="card-body">
        <div class="row align-items-center">
          <div class="col-auto">
            <div class="user-avatar-large" style="width: 50px; height: 50px; font-size: 1.2rem;">
              ${(request.sender.firstName || "").charAt(0)}${(
              request.sender.lastName || ""
            ).charAt(0)}
            </div>
          </div>
          <div class="col">
            <h6 class="mb-1">
              ${request.sender.firstName || ""} ${request.sender.lastName || ""}
              ${
                request.sender.firstName || request.sender.lastName
                  ? ""
                  : '<span class="text-muted">(No name)</span>'
              }
            </h6>
            <p class="text-muted mb-1">@${request.sender.username}</p>
            ${
              request.sender.bio
                ? `<p class="small mb-0">${request.sender.bio}</p>`
                : ""
            }
            <small class="text-muted">Sent ${new Date(
              request.createdAt
            ).toLocaleDateString()}</small>
          </div>
          <div class="col-auto">
            <div class="btn-group" role="group">
              <button class="btn btn-success btn-sm" onclick="acceptRequest('${
                request.id
              }')">
                <i class="fas fa-check"></i> Accept
              </button>
              <button class="btn btn-outline-secondary btn-sm" onclick="declineRequest('${
                request.id
              }')">
                <i class="fas fa-times"></i> Decline
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  `
          )
          .join("");
      }

      function acceptRequest(requestId) {
        fetch("/friends/accept", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ requestId }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              // Remove the request from the UI
              const requestElement = document
                .querySelector(`[onclick="acceptRequest('${requestId}')"]`)
                .closest(".card");
              requestElement.remove();

              // Check if there are any requests left
              const remainingRequests = document.querySelectorAll(
                "#requestsList .card"
              );
              if (remainingRequests.length === 0) {
                document.getElementById("requestsList").style.display = "none";
                document.getElementById("noRequests").style.display = "block";
              }

              // Update request count
              updateRequestCount();

              alert("Friend request accepted!");
            } else {
              alert(data.error || "Could not accept request");
            }
          })
          .catch(() => {
            alert("Could not accept request. Please try again.");
          });
      }

      function declineRequest(requestId) {
        fetch("/friends/decline", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ requestId }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              // Remove the request from the UI
              const requestElement = document
                .querySelector(`[onclick="declineRequest('${requestId}')"]`)
                .closest(".card");
              requestElement.remove();

              // Check if there are any requests left
              const remainingRequests = document.querySelectorAll(
                "#requestsList .card"
              );
              if (remainingRequests.length === 0) {
                document.getElementById("requestsList").style.display = "none";
                document.getElementById("noRequests").style.display = "block";
              }

              // Update request count
              updateRequestCount();

              alert("Friend request declined");
            } else {
              alert(data.error || "Could not decline request");
            }
          })
          .catch(() => {
            alert("Could not decline request. Please try again.");
          });
      }

      function updateRequestCount() {
        fetch("/friends/requests")
          .then((response) => response.json())
          .then((data) => {
            const countBadge = document.getElementById("requestCount");
            if (data.requests.length > 0) {
              countBadge.textContent = data.requests.length;
              countBadge.style.display = "inline";
            } else {
              countBadge.style.display = "none";
            }
          })
          .catch((error) => {
            console.error("Error updating request count:", error);
          });
      }

      function showRequestsLoading() {
        document.getElementById("requestsLoading").style.display = "block";
        document.getElementById("requestsList").style.display = "none";
        document.getElementById("noRequests").style.display = "none";
      }

      function hideRequestsLoading() {
        document.getElementById("requestsLoading").style.display = "none";
      }

      function showRequestsError(message) {
        alert(message);
      }

      function searchUsers() {
        const searchTerm = document.getElementById("searchInput").value.trim();

        if (searchTerm.length === 0) {
          clearSearchResults();
          return;
        }

        showLoading();

        fetch(`/friends/search?q=${encodeURIComponent(searchTerm)}`)
          .then((response) => response.json())
          .then((data) => {
            hideLoading();
            displayResults(data.users);
          })
          .catch((error) => {
            console.error("Search error:", error);
            hideLoading();
            showError("Search failed. Please try again.");
          });
      }

      function displayResults(users) {
        const resultsDiv = document.getElementById("searchResults");
        const usersListDiv = document.getElementById("usersList");
        const noResultsDiv = document.getElementById("noResults");

        if (users.length === 0) {
          resultsDiv.style.display = "none";
          noResultsDiv.style.display = "block";
          return;
        }

        noResultsDiv.style.display = "none";
        resultsDiv.style.display = "block";

        usersListDiv.innerHTML = users
          .map(
            (user) => `
    <div class="card mb-3">
      <div class="card-body">
        <div class="row align-items-center">
          <div class="col-auto">
            <div class="user-avatar-large" style="width: 50px; height: 50px; font-size: 1.2rem;">
              ${(user.firstName || "").charAt(0)}${(user.lastName || "").charAt(
              0
            )}
            </div>
          </div>
          <div class="col">
            <h6 class="mb-1">
              ${user.firstName || ""} ${user.lastName || ""}
              ${
                user.firstName || user.lastName
                  ? ""
                  : '<span class="text-muted">(No name)</span>'
              }
            </h6>
            <p class="text-muted mb-1">@${user.username}</p>
            ${user.bio ? `<p class="small mb-0">${user.bio}</p>` : ""}
          </div>
          <div class="col-auto">
            <button class="btn btn-primary btn-sm" onclick="sendFriendRequest('${
              user.id
            }')">
              <i class="fas fa-user-plus"></i> Add Friend
            </button>
          </div>
        </div>
      </div>
    </div>
  `
          )
          .join("");
      }

      function sendFriendRequest(userId) {
        fetch("/friends/request", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ receiverId: userId }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              alert("Friend request sent!");
              // Optionally update UI to show "Request Sent"
            } else {
              alert(data.error || "Could not send request");
            }
          })
          .catch(() => {
            alert("Could not send request. Please try again.");
          });
      }

      function showLoading() {
        document.getElementById("searchLoading").style.display = "block";
        document.getElementById("searchResults").style.display = "none";
        document.getElementById("noResults").style.display = "none";
      }

      function hideLoading() {
        document.getElementById("searchLoading").style.display = "none";
      }

      function clearSearchResults() {
        document.getElementById("searchResults").style.display = "none";
        document.getElementById("noResults").style.display = "none";
        document.getElementById("usersList").innerHTML = "";
      }

      function showError(message) {
        // You can implement a better error display here
        alert(message);
      }

      // Add event listeners
      document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");

        // Real-time search with debouncing
        searchInput.addEventListener("input", function () {
          clearTimeout(searchTimeout);
          const searchTerm = this.value.trim();

          if (searchTerm.length === 0) {
            clearSearchResults();
            return;
          }

          searchTimeout = setTimeout(() => {
            searchUsers();
          }, 300); // Wait 300ms after user stops typing
        });

        // Search on Enter key
        searchInput.addEventListener("keypress", function (e) {
          if (e.key === "Enter") {
            searchUsers();
          }
        });

        // Load initial request count
        updateRequestCount();
      });
    </script>
  </div>
</div>
