<div class="container mt-4">
  <div class="row">
    <div class="col-md-12">
      <h2>Users</h2>

      <!-- Search Bar -->
      <div class="mb-3">
        <input
          type="text"
          id="searchInput"
          class="form-control"
          placeholder="Search users..."
        />
      </div>

      <!-- Tabs -->
      <ul class="nav nav-tabs mb-3" id="userTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button
            class="nav-link active"
            id="all-tab"
            data-bs-toggle="tab"
            data-bs-target="#all"
            type="button"
            role="tab"
          >
            All Users
            <span class="badge bg-primary ms-1" id="allUsersCount">0</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button
            class="nav-link"
            id="friends-tab"
            data-bs-toggle="tab"
            data-bs-target="#friends"
            type="button"
            role="tab"
          >
            Friends
            <span class="badge bg-success ms-1" id="friendsCount">0</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button
            class="nav-link"
            id="requests-tab"
            data-bs-toggle="tab"
            data-bs-target="#requests"
            type="button"
            role="tab"
          >
            Friend Requests
            <span class="badge bg-warning ms-1" id="requestCount">0</span>
          </button>
        </li>
      </ul>

      <!-- Tab Content -->
      <div class="tab-content" id="userTabsContent">
        <!-- All Users Tab -->
        <div class="tab-pane fade show active" id="all" role="tabpanel">
          <div id="allUsersList" class="row">
            <!-- Users will be loaded here -->
          </div>
        </div>

        <!-- Friends Tab -->
        <div class="tab-pane fade" id="friends" role="tabpanel">
          <div id="friendsList" class="row">
            <!-- Friends will be loaded here -->
          </div>
        </div>

        <!-- Requests Tab -->
        <div class="tab-pane fade" id="requests" role="tabpanel">
          <div id="requestsList" class="row">
            <!-- Requests will be loaded here -->
          </div>
          <div id="noRequests" class="text-center text-muted d-none">
            <div class="py-5">
              <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
              <h5 class="text-muted">No pending friend requests</h5>
              <p class="text-muted">You're all caught up!</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="/js/friends.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    let allUsers = [];
    let friends = [];
    let requests = [];

    // Load users on page load
    loadUsers();

    // Search functionality
    document
      .getElementById("searchInput")
      .addEventListener("input", function (e) {
        const searchTerm = e.target.value.toLowerCase();
        filterUsers(searchTerm);
      });

    async function loadUsers() {
      try {
        const response = await fetch("/friends/users", {
          headers: {
            "X-Requested-With": "XMLHttpRequest",
            Accept: "application/json",
          },
        });
        if (!response.ok) throw new Error("Failed to fetch users");

        allUsers = await response.json();

        // Categorize users
        friends = allUsers.filter((user) => user.status === "friend");
        requests = allUsers.filter(
          (user) => user.status === "request_received"
        );

        // Render all tabs
        renderUsers("allUsersList", allUsers);
        renderUsers("friendsList", friends);
        renderRequests("requestsList", requests);

        // Update all counts
        updateAllCounts();
      } catch (error) {
        console.error("Error loading users:", error);
        showError("Failed to load users. Please try again.");
      }
    }

    function filterUsers(searchTerm) {
      const filtered = allUsers.filter(
        (user) =>
          user.username.toLowerCase().includes(searchTerm) ||
          (user.firstName &&
            user.firstName.toLowerCase().includes(searchTerm)) ||
          (user.lastName && user.lastName.toLowerCase().includes(searchTerm))
      );
      renderUsers("allUsersList", filtered);
    }

    function renderUsers(containerId, users) {
      const container = document.getElementById(containerId);
      if (!container) return;

      if (users.length === 0) {
        container.innerHTML =
          '<div class="col-12"><p class="text-muted">No users found.</p></div>';
        return;
      }

      container.innerHTML = users
        .map(
          (user) => `
      <div class="col-md-6 col-lg-4 mb-3" data-user-id="${user.id}">
        <div class="card user-card">
          <div class="card-body">
            <div class="d-flex align-items-center mb-3">
              <div class="user-avatar-large me-3">
                ${getUserAvatar(user)}
              </div>
              <div class="user-info">
                <h6 class="mb-0 user-name">${
                  user.firstName || user.lastName
                    ? `${user.firstName || ""} ${user.lastName || ""}`
                    : user.username
                }</h6>
                <p class="text-muted mb-0 small username">@${user.username}</p>
              </div>
            </div>
            <div id="friend-actions-${user.id}">
              ${getActionButton(user)}
            </div>
          </div>
        </div>
      </div>
    `
        )
        .join("");

      // Add event listeners for buttons
      // addButtonEventListeners(); // This line is removed as per the edit hint
    }

    function getUserAvatar(user) {
      if (user.gravatarUrl) {
        return `<img src="${user.gravatarUrl}" alt="${user.username}" class="rounded-circle profile-image" style="width: 100%; height: 100%; object-fit: cover;">`;
      }

      if (user.profilePicture) {
        return `<img src="${user.profilePicture}" alt="${user.username}" class="rounded-circle profile-image" style="width: 100%; height: 100%; object-fit: cover;">`;
      } else {
        const firstName = user.firstName || "";
        const lastName = user.lastName || "";
        const initials = (
          firstName.charAt(0) + lastName.charAt(0)
        ).toUpperCase();
        return `<div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 100%; height: 100%;">${initials}</div>`;
      }
    }

    function renderRequests(containerId, requests) {
      const container = document.getElementById(containerId);
      if (!container) return;

      if (requests.length === 0) {
        container.innerHTML = "";
        document.getElementById("noRequests").classList.remove("d-none");
        return;
      }

      document.getElementById("noRequests").classList.add("d-none");
      container.innerHTML = requests
        .map(
          (user) => `
      <div class="col-md-6 col-lg-4 mb-3" data-user-id="${user.id}">
        <div class="card user-card">
          <div class="card-body">
            <div class="d-flex align-items-center mb-3">
              <div class="user-avatar-large me-3">
                ${getUserAvatar(user)}
              </div>
              <div class="user-info">
                <h6 class="mb-0 user-name">${
                  user.firstName || user.lastName
                    ? `${user.firstName || ""} ${user.lastName || ""}`
                    : user.username
                }</h6>
                <p class="text-muted mb-0 small username">@${user.username}</p>
                <small class="text-muted">Wants to be your friend</small>
              </div>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-success btn-sm accept-request-btn" data-request-id="${
                user.requestId
              }">
                <i class="fas fa-check"></i> Accept
              </button>
              <button class="btn btn-danger btn-sm decline-request-btn" data-request-id="${
                user.requestId
              }">
                <i class="fas fa-times"></i> Decline
              </button>
            </div>
          </div>
        </div>
      </div>
    `
        )
        .join("");

      // Add event listeners for request buttons
      // addRequestButtonEventListeners(); // This line is removed as per the edit hint
    }

    function getActionButton(user) {
      switch (user.status) {
        case "friend":
          return `<button class="btn btn-outline-danger btn-sm remove-friend-btn" data-user-id="${
            user.id
          }" data-user-name="${user.firstName || user.lastName ? `${user.firstName || ""} ${user.lastName || ""}` : user.username}">
            <i class="fas fa-user-minus"></i> Remove Friend
          </button>`;
        case "request_sent":
          return `<div class="d-flex gap-2">
            <button class="btn btn-success btn-sm" disabled>
              <i class="fas fa-check"></i> Request Sent
            </button>
            <button class="btn btn-outline-secondary btn-sm cancel-request-btn" id="cancel-request-btn-${
              user.id
            }" data-user-id="${user.id}" data-user-name="${user.firstName || user.lastName ? `${user.firstName || ""} ${user.lastName || ""}` : user.username}" data-request-id="${user.requestId}">
              <i class="fas fa-times"></i> Cancel
            </button>
          </div>`;
        case "request_received":
          return `<div class="d-flex gap-2">
            <button class="btn btn-success btn-sm accept-request-btn" data-request-id="${user.requestId}">
              <i class="fas fa-check"></i> Accept
            </button>
            <button class="btn btn-danger btn-sm decline-request-btn" data-request-id="${user.requestId}">
              <i class="fas fa-times"></i> Decline
            </button>
          </div>`;
        default:
          return `<button class="btn btn-primary btn-sm add-friend-btn" id="add-friend-btn-${
            user.id
          }" data-user-id="${user.id}" data-user-name="${user.firstName || user.lastName ? `${user.firstName || ""} ${user.lastName || ""}` : user.username}">
            <i class="fas fa-user-plus"></i> Add Friend
          </button>`;
      }
    }

    // Event delegation is handled by friends.js - no need to duplicate here

    // Remove the old event listener functions since we're using event delegation
    // function addButtonEventListeners() { ... }
    // function addRequestButtonEventListeners() { ... }

    function updateAllCounts() {
      const allUsersCountBadge = document.getElementById("allUsersCount");
      const friendsCountBadge = document.getElementById("friendsCount");
      const requestCountBadge = document.getElementById("requestCount");

      allUsersCountBadge.textContent = allUsers.length;
      friendsCountBadge.textContent = friends.length;
      requestCountBadge.textContent = requests.length;

      if (allUsers.length > 0) {
        allUsersCountBadge.classList.remove("d-none");
      } else {
        allUsersCountBadge.classList.add("d-none");
      }

      if (friends.length > 0) {
        friendsCountBadge.classList.remove("d-none");
      } else {
        friendsCountBadge.classList.add("d-none");
      }

      if (requests.length > 0) {
        requestCountBadge.classList.remove("d-none");
      } else {
        requestCountBadge.classList.add("d-none");
      }
    }

    // Function to refresh counts after friend status changes
    function refreshCounts() {
      // Re-categorize users based on current status
      friends = allUsers.filter((user) => user.status === "friend");
      requests = allUsers.filter((user) => user.status === "request_received");

      // Update the display
      updateAllCounts();
    }

    // Make refreshCounts available globally so friends.js can call it
    window.refreshCounts = refreshCounts;

    function showError(message) {
      // Create error alert
      const errorAlert = document.createElement("div");
      errorAlert.className = "alert alert-danger alert-dismissible fade show";
      errorAlert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;

      // Insert at the top of the container
      const container = document.querySelector(".container");
      container.insertBefore(errorAlert, container.firstChild);
    }
  });
</script>
